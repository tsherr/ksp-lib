//----------------------TSMath----------------------//

{Copyright (c) 2018 Toby Sherriff

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description:
	This file contains a set of helpful functions and macros relating to math and numbers.

Author: 
	Toby Sherriff
	www.tobysherriff.net
	toby@tobysherriff.net

Version History:
	v0.1 - Initial implementation
}


USE_CODE_IF_NOT(TS_MATH_IMPORTED)
	SET_CONDITION(TS_MATH_IMPORTED)

	//Converts a microsecond value to its equivalent millisecond value
	function USToMS(us) -> ms
		ms := (real_to_int(int_to_real(us) / int_to_real(US_PER_MS)))
	end function

	//Converts a millisecond value to its equivalent microsecond value
	function MSToUS(ms) -> us
		us := (real_to_int(int_to_real(ms) * int_to_real(US_PER_MS)))
	end function

	//Scales value in [rangemin, rangemax] to its equivalent position in [newmin, newmax]
	function ScaleValue(value, rangemin, rangemax, newmin, newmax) -> newvalue

		//TODO: something is not working properly here... can't reach newmax 
		declare ~temp
		//determine the new value as a percentage of the new range, then shift as needed
		temp := (int_to_real(value - rangemin) / int_to_real(rangemax - rangemin))
		temp := (temp * int_to_real(newmax - newmin))
		newvalue := real_to_int(round(int_to_real(newmin) + temp))

	end function

	define ScaleFromEP(ep_val, min, max) := real_to_int(math.scale(int_to_real(ep_val), 0.0, int_to_real(EP_MAX_VAL), int_to_real(min), int_to_real(max)))

	//Returns the value, ensuring it is within the closed interval [min, max]
	function ClampValue(value, min, max) -> result
		if (value < min)
			result := min
		else if (value > max)
			result := max
		else
			result := value
		end if
	end function

	/*
	function RealRandom(min, max) -> result
		result := math.scale(int_to_real(random(0, EP_MAX_VAL)), 0.0, int_to_real(EP_MAX_VAL), min, max)
	end function
	*/

	//t, a, and b are real in [-1, 1]
	macro EPXFade(t, {out} a, {out} b)
		a := sqrt(0.5 * (1.0 + t))
		b := sqrt(0.5 * (1.0 - t))
	end macro

END_USE_CODE //USE_CODE_IF_NOT(TS_MATH_IMPORTED)
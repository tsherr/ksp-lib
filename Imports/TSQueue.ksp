//----------------------TSQueue----------------------//

{Copyright (c) 2018 Toby Sherriff

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Description:
	A Queue.

Author: 
	Toby Sherriff
	www.tobysherriff.net
	toby@tobysherriff.net

Version History:
	v0.1 - Initial implementation
}

USE_CODE_IF_NOT(TS_DEBUG_IMPORTED)
	SET_CONDITION(TS_DEBUG_IMPORTED)

	define QUEUE_EMPTY_VAL := -1

	macro CreateQueue(#varname#, #size#)
		declare #varname#[#size#] := (QUEUE_EMPTY_VAL)
	end macro

	function Enqueue(queue, data) -> result

		declare polyphonic i := 0
		while (i < num_elements(queue) and queue[i] # QUEUE_EMPTY_VAL)
			inc(i)
		end while

		if (i < num_elements(queue))
			queue[i] := data
			result := 1
		else
			result := 0
		end if

	end function

	function Dequeue(queue) -> data

		declare polyphonic i := 0
		data := queue[0]

		while i < (num_elements(queue) - 1)
			queue[i] := queue[i + 1]
			inc(i)
		end while

	end function

	function Pop(queue)

		declare polyphonic i := 0

		while i < (num_elements(queue) - 1)
			queue[i] := queue[i + 1]
			inc(i)
		end while

	end function

	function Peek(queue) -> data

		data := queue[0]

	end function

	function QueueSize(queue) -> data

		declare polyphonic i := 0
		while (i < num_elements(queue) and queue[i] # QUEUE_EMPTY_VAL)
			inc(i)
		end while

		data := i

	end function

END_USE_CODE
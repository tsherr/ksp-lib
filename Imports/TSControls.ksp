{------------------------INIT AND GLOBAL------------------------}
macro InitTSControls(#max_num_controls#, #show_debug_controls#)
	declare NumControls := 0
	declare AllControlIDs[#max_num_controls#] := (UNDEFINED)
	declare RadioGroups[MAX_NUM_CONTROLS_PER_TYPE, 2] := (UNDEFINED)//[button_id, radio_group_id]
	declare NumRadioButtons := 0
	declare TSC_i := 0
	declare TSC_temp := 0
	declare CtrlDbg := #show_debug_controls#
	declare DefaultZLayer := DEFAULT_LAYER

	//Debug
	declare ui_menu me_CtrlDbgCtrlSel
	declare ui_menu me_CtrlDbgPropSel
	declare ui_value_edit va_CtrlDbgPropDisp (MIN_KSP_VALUE, MAX_KSP_VALUE, 1)

	if (CtrlDbg = FALSE)
		me_CtrlDbgCtrlSel -> hide := HIDE_WHOLE_CONTROL
		me_CtrlDbgPropSel -> hide := HIDE_WHOLE_CONTROL
		va_CtrlDbgPropDisp -> hide := HIDE_WHOLE_CONTROL
	else
		add_menu_item(me_CtrlDbgPropSel, "x", CONTROL_PAR_POS_X)
		add_menu_item(me_CtrlDbgPropSel, "y", CONTROL_PAR_POS_Y)
		add_menu_item(me_CtrlDbgPropSel, "width", CONTROL_PAR_WIDTH)
		add_menu_item(me_CtrlDbgPropSel, "height", CONTROL_PAR_HEIGHT)
		me_CtrlDbgCtrlSel -> width := 200
		va_CtrlDbgPropDisp -> text := ""
	end if

end macro

macro SetDefaultZLayer(#layer#)
	DefaultZLayer := #layer#
end macro

macro StoreControl(#control#)
	AllControlIDs[NumControls] := get_ui_id(#control#)

	if (CtrlDbg = TRUE)
		add_menu_item(me_CtrlDbgCtrlSel, "#control#", get_ui_id(#control#))
	end if

	inc(NumControls)
end macro

{------------------------DEBUG------------------------}
macro MoveDebugContols(#x#, #y#)
	me_CtrlDbgCtrlSel -> x := #x#
	me_CtrlDbgCtrlSel -> y := #y#
	me_CtrlDbgPropSel -> x := me_CtrlDbgCtrlSel -> x + me_CtrlDbgCtrlSel -> width + 10
	me_CtrlDbgPropSel -> y := #y#
	va_CtrlDbgPropDisp -> x := me_CtrlDbgPropSel -> x + me_CtrlDbgPropSel -> width + 10
	va_CtrlDbgPropDisp -> y := #y#
end macro

on ui_control(me_CtrlDbgCtrlSel)
	call UpdateDebugPropDisp()
end on

on ui_control(me_CtrlDbgPropSel)
	call UpdateDebugPropDisp()
end on

on ui_control(va_CtrlDbgPropDisp)
	set_control_par(get_menu_item_value(get_ui_id(me_CtrlDbgCtrlSel), me_CtrlDbgCtrlSel -> selected_item_idx), get_menu_item_value(get_ui_id(me_CtrlDbgPropSel), me_CtrlDbgPropSel -> selected_item_idx), va_CtrlDbgPropDisp)
end on

function UpdateDebugPropDisp()
	va_CtrlDbgPropDisp -> value := get_control_par(get_menu_item_value(get_ui_id(me_CtrlDbgCtrlSel), me_CtrlDbgCtrlSel -> selected_item_idx), get_menu_item_value(get_ui_id(me_CtrlDbgPropSel), me_CtrlDbgPropSel -> selected_item_idx))
end function

{------------------------BUTTTON------------------------}
macro CreateButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#)
	if (1=1) //Workaround for Kontakt's parser stack overflow bug
		declare ui_button #name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if	
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end if
end macro

macro CreateLabel(#name#, #x#, #y#, #w#, #h#, #text#, #picture#)
	if (1=1) //Workaround for Kontakt's parser stack overflow bug
		declare ui_label #name#(1, 1)
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end if
end macro

macro CreateSlider(#name#, #x#, #y#, #w#, #h#, #min#, #max#, #default#, #persistent#, #mouse#, #picture#)
	if (1=1) //Workaround for Kontakt's parser stack overflow bug
		declare ui_slider #name#(#min#, #max#)
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> default := #default#
		#name# -> mouse_behaviour := #mouse#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end if
end macro

{------------------------RADIO BUTTON------------------------}
macro CreateRadioButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#, #radio_group#)
	CreateButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#)
	
	declare #name#_radio_group := #radio_group#
	RadioGroups[NumRadioButtons, 0] := get_ui_id(#name#)
	RadioGroups[NumRadioButtons, 1] := #name#_radio_group
	inc(NumRadioButtons)
end macro

macro SetRadioButton(#button#)
	for TSC_i := 0 to RadioGroups.SIZE_D1 - 1
		if (RadioGroups[TSC_i, 1] = #button#_radio_group)
			RadioGroups[TSC_i, 0] -> value := FALSE
		end if
	end for
	#button# := TRUE
end macro

function SetRadioButtonID(button_id)
	//First find the radio group assigned to this button id
	TSC_temp := -1
	TSC_i := 0
	while TSC_temp = -1 or TSC_i < RadioGroups.SIZE_D1
		if (RadioGroups[TSC_i, 0] = button_id)
			TSC_temp := RadioGroups[TSC_i, 1]
		end if
		inc(TSC_i)
	end while

	//Then perform the state-switching
	for TSC_i := 0 to RadioGroups.SIZE_D1 - 1
		if (RadioGroups[TSC_i, 1] = TSC_temp)
			RadioGroups[TSC_i, 0] -> value := FALSE
		end if
	end for
	set_control_par(button_id, CONTROL_PAR_VALUE, TRUE)
end function

macro OnRadioButton(#button#)
	on ui_control(#button#)
		SetRadioButton(#button#)
		#button#_handler()
	end on
		function #button#_handler()
end macro

macro EndOnRadioButton
	end function
end macro
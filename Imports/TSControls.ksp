{********************************************TSControls********************************************}
/*
	Dependencies:
		TSConstants
		TSDebug
 */

 USE_CODE_IF_NOT(TS_CONTROLS_IMPORTED)
	SET_CONDITION(TS_CONTROLS_IMPORTED)

	{------------------------INIT AND GLOBAL------------------------}
	macro InitTSControls(#max_num_controls#, #show_debug_controls#)
		declare NumControls := 0
		declare AllControlIDs[#max_num_controls#] := (UNDEFINED)
		declare RadioGroups[MAX_NUM_CONTROLS_PER_TYPE, 2] := (UNDEFINED)//[button_id, radio_group_id]
		declare NumRadioButtons := 0
		declare TSC_i := 0
		declare TSC_temp := 0
		declare CtrlDbg := #show_debug_controls#
		declare DefaultZLayer := BACK_LAYER
		declare KnobParameterDisplayWidth := 75
		declare KnobParameterDisplayFont := 1
		declare ParameterDisplayTimeoutMS := 1000
		declare LastTouchedControlID := -1

		//Debug
		declare pers ui_menu me_CtrlDbgCtrlSel
		declare ui_button bu_CtrlDbgCtrlSelPrev
		declare ui_button bu_CtrlDbgCtrlSelNext
		declare pers ui_menu me_CtrlDbgPropSel
		declare pers ui_value_edit va_CtrlDbgPropDisp (-1000, 1000, 1)
		
		if (CtrlDbg = FALSE)
			me_CtrlDbgCtrlSel -> hide := HIDE_WHOLE_CONTROL
			me_CtrlDbgPropSel -> hide := HIDE_WHOLE_CONTROL
			va_CtrlDbgPropDisp -> hide := HIDE_WHOLE_CONTROL
			bu_CtrlDbgCtrlSelPrev -> hide := HIDE_WHOLE_CONTROL
			bu_CtrlDbgCtrlSelNext -> hide := HIDE_WHOLE_CONTROL
		else
			add_menu_item(me_CtrlDbgPropSel, "x", CONTROL_PAR_POS_X)
			add_menu_item(me_CtrlDbgPropSel, "y", CONTROL_PAR_POS_Y)
			add_menu_item(me_CtrlDbgPropSel, "width", CONTROL_PAR_WIDTH)
			add_menu_item(me_CtrlDbgPropSel, "height", CONTROL_PAR_HEIGHT)
			me_CtrlDbgCtrlSel -> width := 200
			va_CtrlDbgPropDisp -> text := ""
			va_CtrlDbgPropDisp -> width := 250
			va_CtrlDbgPropDisp -> mouse_behaviour := -5000
			bu_CtrlDbgCtrlSelPrev -> text := "<"
			bu_CtrlDbgCtrlSelNext -> text := ">"
			bu_CtrlDbgCtrlSelPrev -> width := 18
			bu_CtrlDbgCtrlSelNext -> width := 18
			MoveDebugContols(0, 0)			
		end if
		
	end macro

	macro SetDefaultZLayer(#layer#)
		DefaultZLayer := #layer#
	end macro

	macro SetKnobParameterDisplayFont(#font#)
		KnobParameterDisplayFont := #font#
	end macro

	macro StoreControl(#control#)
		AllControlIDs[NumControls] := get_ui_id(#control#)

		if (CtrlDbg = TRUE)
			add_menu_item(me_CtrlDbgCtrlSel, "#control#", get_ui_id(#control#))
		end if

		inc(NumControls)
		if (NumControls = num_elements(AllControlIDs))
			debug("TSControls - Warning, control limit exceeded!")
		end if
	end macro

	{------------------------DEBUG------------------------}
	macro MoveDebugContols(#x#, #y#)
		bu_CtrlDbgCtrlSelPrev -> x := #x#
		bu_CtrlDbgCtrlSelPrev -> y := #y#
		bu_CtrlDbgCtrlSelNext -> x := #x# + 20
		bu_CtrlDbgCtrlSelNext -> y := #y#
		me_CtrlDbgCtrlSel -> x := bu_CtrlDbgCtrlSelNext -> x + 20
		me_CtrlDbgCtrlSel -> y := #y#
		me_CtrlDbgPropSel -> x := me_CtrlDbgCtrlSel -> x + me_CtrlDbgCtrlSel -> width + 10
		me_CtrlDbgPropSel -> y := #y#
		va_CtrlDbgPropDisp -> x := me_CtrlDbgPropSel -> x + me_CtrlDbgPropSel -> width + 10
		va_CtrlDbgPropDisp -> y := #y#
	end macro

	on ui_control(me_CtrlDbgCtrlSel)
		call UpdateDebugPropDisp()
	end on

	on ui_control(me_CtrlDbgPropSel)
		call UpdateDebugPropDisp()
	end on

	on ui_control(va_CtrlDbgPropDisp)
		set_control_par(get_menu_item_value(get_ui_id(me_CtrlDbgCtrlSel), me_CtrlDbgCtrlSel -> selected_item_idx), get_menu_item_value(get_ui_id(me_CtrlDbgPropSel), me_CtrlDbgPropSel -> selected_item_idx), va_CtrlDbgPropDisp)
	end on

	on ui_control(bu_CtrlDbgCtrlSelPrev)
		bu_CtrlDbgCtrlSelPrev := FALSE
		me_CtrlDbgCtrlSel -> value:= (me_CtrlDbgCtrlSel -> value) - 1
		call UpdateDebugPropDisp()
	end on

	on ui_control(bu_CtrlDbgCtrlSelNext)
		bu_CtrlDbgCtrlSelNext := FALSE
		me_CtrlDbgCtrlSel -> value := (me_CtrlDbgCtrlSel -> value) + 1
		call UpdateDebugPropDisp()
	end on

	function UpdateDebugPropDisp()
		va_CtrlDbgPropDisp -> value := get_control_par(get_menu_item_value(get_ui_id(me_CtrlDbgCtrlSel), me_CtrlDbgCtrlSel -> selected_item_idx), get_menu_item_value(get_ui_id(me_CtrlDbgPropSel), me_CtrlDbgPropSel -> selected_item_idx))
	end function
	{------------------------------------------------}

	{------------------------Control Constructors------------------------}
	macro CreateButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#})
		declare ui_button #name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if	
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateSwitch(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#)
		declare ui_switch #name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if	
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateValueEdit(#name#, #x#, #y#, #w#, #h#, #min#, #max#, #disp_ratio#, #label#, #persistent#, #picture#, #font#)
		declare ui_value_edit #name#(#min#, #max#, #disp_ratio#)
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> min := #min#
		#name# -> max := #max#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> picture := #picture#
		#name# -> font_type := #font#
		#name# -> text := #label#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if	
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateLabel(#name#, #x#, #y#, #w#, #h#, #text#, #picture#)
		declare ui_label #name#(1, 1)
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateSlider(#name#, #x#, #y#, #w#, #h#, #min#, #max#, #default#, #persistent#, #mouse#, #picture#)
		declare ui_slider #name#(#min#, #max#)
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> default := #default#
		#name# -> mouse_behaviour := #mouse#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateMenu(#name#, #x#, #y#, #w#, #h#, #default#, #font#, #align#, #persistent#, #picture#)
		declare ui_menu #name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> default := #default#
		#name# -> font_type := #font#\
		#name# -> text_alignment := #align#
		#name# -> picture := #picture#
		if (#persistent# = TRUE)
			make_persistent(#name#)
		end if
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateLevelMeter(#name#, #x#, #y#, #w#, #h#, #group#, #slot#, #channel#, #bus#, #vertical#)
		declare ui_level_meter #name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> vertical := #vertical#
		attach_level_meter(get_ui_id(#name#), #group#, #slot#, #channel#, #bus#)
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	macro CreateTextEdit(#name#, #x#, #y#, #w#, #h#, #text#, #picture#)
		declare ui_text_edit @#name#
		#name# -> x := #x#
		#name# -> y := #y#
		#name# -> width := #w#
		#name# -> height := #h#
		#name# -> text := #text#
		#name# -> picture := #picture#
		#name# -> z_layer := DefaultZLayer
		StoreControl(#name#)
	end macro

	{------------------------KNOB WITH DISPLAY------------------------}
	macro CreateKnobWithDisplay(#name#, #x#, #y#, #w#, #h#, #min#, #max#, #def#, #pers#, #mouse#, #label#, #picture#)	
		CreateSlider(#name#, #x#, #y#, #w#, #h#, #min#, #max#, #def#, #pers#, #mouse#, #picture#)	
		CreateLabel(#name#_disp, #x#, #y#, KnobParameterDisplayWidth, 18, #label#, "")
		#name#_disp -> font_type := KnobParameterDisplayFont
		#name#_disp -> text_alignment := ALIGN_CENTER
		#name#_disp -> hide := HIDE_PART_BG
		declare @#name#_label := #label#
		MoveKnobWithDisplay(#name#, #x#, #y#)
	end macro
	macro MoveKnobWithDisplay(#name#, #x#, #y#)
		#name# -> x := #x#
		#name# -> y := #y#
		#name#_disp -> x := (#x#) + (#name# -> width / 2) - (KnobParameterDisplayWidth / 2) - 1
		#name#_disp -> y := (#y#) + #name# -> height + 2
	end macro
	macro UpdateKnobDisplay(#name#, #text#, #suffix#)
		#name#_disp -> text := #text# & #suffix#
		#name# -> label := #text# & #suffix#
	end macro
	macro UpdateKnobLabel(#name#, #label#)
		#name#_label := #label#
		#name#_disp -> text := #label#
	end macro
	macro UpdateKnobWithDisplayVisibility(#name#, #visibility#)
		#name# -> hide := #visibility#
		if (#visibility# = HIDE_PART_NOTHING)
			#name#_disp -> hide := HIDE_PART_BG
		else
			#name#_disp -> hide := #visibility#
		end if
	end macro

	macro OnKnobWithDisplayHandler(#name#)
		on ui_control(#name#)
			call #name#_Handler()
		end on
		function #name#_Handler()
			declare #name#_callback_id := NI_CALLBACK_ID
	end macro
	macro EndOnKnob(#name#)
			wait(ParameterDisplayTimeoutMS * 1000)
			if (#name#_callback_id = NI_CALLBACK_ID)
				#name#_disp -> text := #name#_label
			end if
		end function
	end macro

	{------------------------RADIO BUTTON------------------------}
	macro CreateRadioButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#, #radio_group#)
		CreateButton(#name#, #x#, #y#, #w#, #h#, #persistent#, #text#, #picture#)
		
		declare #name#_radio_group := #radio_group#
		RadioGroups[NumRadioButtons, 0] := get_ui_id(#name#)
		RadioGroups[NumRadioButtons, 1] := #name#_radio_group
		inc(NumRadioButtons)
	end macro

	macro SetRadioButton(#button#)
		for TSC_i := 0 to RadioGroups.SIZE_D1 - 1
			if (RadioGroups[TSC_i, 1] = #button#_radio_group)
				RadioGroups[TSC_i, 0] -> value := FALSE
			end if
		end for
		#button# := TRUE
	end macro

	function SetRadioButtonID(button_id)
		//First find the radio group assigned to this button id
		TSC_temp := -1
		TSC_i := 0
		while TSC_temp = -1 or TSC_i < RadioGroups.SIZE_D1
			if (RadioGroups[TSC_i, 0] = button_id)
				TSC_temp := RadioGroups[TSC_i, 1]
			end if
			inc(TSC_i)
		end while

		//Then perform the state-switching
		for TSC_i := 0 to RadioGroups.SIZE_D1 - 1
			if (RadioGroups[TSC_i, 1] = TSC_temp)
				RadioGroups[TSC_i, 0] -> value := FALSE
			end if
		end for
		set_control_par(button_id, CONTROL_PAR_VALUE, TRUE)
	end function

	macro OnRadioButton(#button#)
		OnUIControl(#button#)
			SetRadioButton(#button#)
			#button#_handler()
		end on
			function #button#_handler()
	end macro

	macro EndOnRadioButton
		end function
	end macro

	{------------------------CONTROL HANDLER BASE------------------------}
	macro OnUIControl(#control#)
		on ui_control(#control#)
			if (CtrlDbg = TRUE)
				LastTouchedControlID := get_ui_id(#control#)
				me_CtrlDbgCtrlSel := LastTouchedControlID
				call UpdateDebugPropDisp()
			end if		
	end macro

	macro EndOnUIControl
		end on
	end macro

	{------------------------ASSETS------------------------}	
	macro DefineAsset(#asset_identifier#, #asset_filename#)
		declare @#asset_identifier# := "#asset_filename#"
		declare #asset_identifier#_WIDTH := #asset_filename#_WIDTH
		declare #asset_identifier#_HEIGHT := #asset_filename#_HEIGHT
	end macro

END_USE_CODE